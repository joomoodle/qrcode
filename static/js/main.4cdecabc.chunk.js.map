{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["downloadQR","pngUrl","document","getElementById","toDataURL","replace","downloadLink","createElement","href","download","body","appendChild","click","removeChild","App","props","state","empresa","nombre","puesto","oficina","celular","correo","direcion","isHidden","beignCard","handleChange","bind","handleSubmit","field","event","newState","this","target","value","setState","str","console","log","preventDefault","className","onSubmit","type","onChange","placeholder","id","size","level","includeMargin","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","unregister","navigator","serviceWorker","ready","then","registration","catch","error","message"],"mappings":"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","file":"static/js/main.4cdecabc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport QRCode from \"qrcode.react\";\n\nconst downloadQR = () => {\n  const canvas = document.getElementById(\"123456\");\n  const pngUrl = canvas\n    .toDataURL(\"image/png\")\n    .replace(\"image/png\", \"image/octet-stream\");\n  let downloadLink = document.createElement(\"a\");\n  downloadLink.href = pngUrl;\n  downloadLink.download = \"123456.png\";\n  document.body.appendChild(downloadLink);\n  downloadLink.click();\n  document.body.removeChild(downloadLink);\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      empresa: \"\",\n      nombre: \"\",\n      puesto: \"\",\n      oficina: \"\",\n      celular: \"\",\n      correo: \"\",\n      direcion: \"\",\n      isHidden: true,\n      beignCard: \"\"\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(field, event) {\n    const newState = { ...this.state };\n    newState[field] = event.target.value;\n    this.setState(newState);\n  }\n\n  handleSubmit(event) {\n    const { nombre, empresa, oficina, celular, correo, direcion } = this.state;\n    let str = \"BEGIN:VCARD\\n\";\n    str += \"VERSION:3.0\\n\";\n    str += `N:${nombre}\\n`;\n    str += `FN:${nombre}\\n`;\n    str += `ORG:${empresa}\\n`;\n    str += \"URL:\\n\";\n    str += `TEL;TYPE=voice,work,pref:+52 1 ${oficina}\\n`;\n    str += `TEL;TYPE=voice,cell,pref:+52 ${celular}\\n`;\n    str += `EMAIL:${correo}\\n`;\n\n    str += `ADR:TYPE=WORK,PREF:;;${direcion}\\n`;\n    str += \"END:VCARD\";\n    console.log(str);\n\n    this.setState({ isHidden: false, beignCard: str });\n\n    event.preventDefault();\n  }\n  render() {\n    const { isHidden, beignCard } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {isHidden ? (\n            <form onSubmit={this.handleSubmit}>\n              <label>\n                <input\n                  type=\"text\"\n                  value={this.state.empresa}\n                  onChange={event => {\n                    this.handleChange(\"empresa\", event);\n                  }}\n                  placeholder=\"Empresa\"\n                />\n              </label>\n              <label>\n                <input\n                  type=\"text\"\n                  value={this.state.nombre}\n                  onChange={event => {\n                    this.handleChange(\"nombre\", event);\n                  }}\n                  placeholder=\"Nombre\"\n                />\n              </label>\n              <label>\n                <input\n                  type=\"text\"\n                  value={this.state.puesto}\n                  onChange={event => {\n                    this.handleChange(\"puesto\", event);\n                  }}\n                  placeholder=\"Puesto\"\n                />\n              </label>\n              <label>\n                <input\n                  type=\"text\"\n                  value={this.state.oficina}\n                  onChange={event => {\n                    this.handleChange(\"oficina\", event);\n                  }}\n                  placeholder=\"Telefono oficina\"\n                />\n              </label>\n              <label>\n                <input\n                  type=\"text\"\n                  value={this.state.celular}\n                  onChange={event => {\n                    this.handleChange(\"celular\", event);\n                  }}\n                  placeholder=\"Telefono Celular\"\n                />\n              </label>\n              <label>\n                <input\n                  type=\"text\"\n                  value={this.state.correo}\n                  onChange={event => {\n                    this.handleChange(\"correo\", event);\n                  }}\n                  placeholder=\"Correo\"\n                />\n              </label>\n              <label>\n                <input\n                  type=\"text\"\n                  value={this.state.direcion}\n                  onChange={event => {\n                    this.handleChange(\"direcion\", event);\n                  }}\n                  placeholder=\"DirecciÃ³n de empresa\"\n                />\n              </label>\n              <input type=\"submit\" value=\"Generar QR\" />\n            </form>\n          ) : (\n            <>\n              <QRCode\n                id=\"123456\"\n                value={beignCard}\n                size={290}\n                level={\"H\"}\n                includeMargin={true}\n              />\n              <a onClick={downloadQR}>Descargar</a>\n              <a\n                onClick={() => {\n                  this.setState({ isHidden: true });\n                }}\n              >\n                Crear otro\n              </a>\n            </>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}